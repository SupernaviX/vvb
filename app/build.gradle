plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}

static def generatedString(value) {
    if (value == null) {
        return "null"
    }
    return "\"${value}\""
}

def tryReadConfig(filename) {
    def config = [:]
    def file = new File(project.rootDir, filename)
    if (!file.exists()) {
        return config
    }
    file.readLines().each {
        if (!it.isEmpty() && !it.startsWith('#')) {
            def (key, value) = it.split("=", 2)
            config[key] = value
        }
    }
    return config
}

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        ]
    }
    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "com.simongellis.vvb"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 31
        versionName "1.9.0"

        buildConfigField("String", "ACRA_URI", generatedString("https://vvb-notifications.simongellis.com/report"))

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "ACRA_ENABLED", "false")
            buildConfigField("String", "ACRA_BASIC_AUTH_LOGIN", "null")
            buildConfigField("String", "ACRA_BASIC_AUTH_PASSWORD", "null")
        }
        release {
            buildConfigField("boolean", "ACRA_ENABLED", "true")
            def config = tryReadConfig("release.env")
            buildConfigField("String", "ACRA_BASIC_AUTH_LOGIN", generatedString(config.login))
            buildConfigField("String", "ACRA_BASIC_AUTH_PASSWORD", generatedString(config.password))

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    aaptOptions {
        noCompress "vb"
    }

    packagingOptions {
        pickFirst 'app'
        jniLibs {
            // https://issuetracker.google.com/issues/147096055#comment3
            useLegacyPackaging = true
        }
    }

    ndkVersion = "22.1.7171670"
    namespace 'com.simongellis.vvb'
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

// The cardboard SDK stores libraries in target-specific folders,
// so grab the right library for the toolchain we're compiling now
def includeCardboardSdk(spec, toolchain) {
    def folder = toolchain.folder - ~/^android\//
    def cardboardSdkLocation = "$project.rootDir/app/libraries/jni/$folder"
    spec.environment("RUSTFLAGS", "-L $cardboardSdkLocation -l android")

    // Copy the right SDK into the project as well
    copy {
        from cardboardSdkLocation
        into "$buildDir/rustJniLibs/$toolchain.folder"
        include "lib*.so"
    }
}

cargo {
    module = ".."
    libname = "vvb"
    targets = ['arm', 'arm64', 'x86', 'x86_64']
    profile = "release"
    prebuiltToolchains = true
    exec { spec, target -> includeCardboardSdk (spec, target) }
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    from zipTree("${project.rootDir}/cardboard-sdk/sdk-release.aar")
    into "libraries/"
    include "jni/**/lib*.so"
}

task deleteNdk(type: Delete) {
    delete "libraries"
}

build.dependsOn(extractNdk)
clean.dependsOn(deleteNdk)

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
    if (task.name.startsWith('cargoBuild')) {
        task.dependsOn 'extractNdk'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':cardboard-sdk')
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // lifecycle things
    def lifecycleVersion = '2.5.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"

    // relinker
    implementation "com.getkeepsafe.relinker:relinker:1.4.3"

    // serializer
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2"

    // cardboard dependencies
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'

    // color picker
    implementation 'com.github.kizitonwose.colorpreference:support:1.1.0'

    // file picker
    implementation 'com.nononsenseapps:filepicker:4.2.1'

    // flow-emitting preferences client
    implementation 'com.fredporciuncula:flow-preferences:1.5.0'

    // error instrumentation
    def acraVersion = '5.8.3'
    implementation("ch.acra:acra-http:$acraVersion")
    implementation("ch.acra:acra-toast:$acraVersion")
}